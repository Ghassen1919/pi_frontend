{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet BodyUserComponent = class BodyUserComponent {\n  constructor(userAuthService, router, userService, http, claimservice, renderer) {\n    this.userAuthService = userAuthService;\n    this.router = router;\n    this.userService = userService;\n    this.http = http;\n    this.claimservice = claimservice;\n    this.renderer = renderer;\n    this.greeting = '';\n    this.defaultSymbol = \"XAUUSD\";\n  }\n\n  ngOnInit() {\n    this.claimservice.reloadOnce();\n    this.userService.getCurrentUser().subscribe(user => {\n      this.currentUser = user;\n    }, error => {\n      // Handle errors, e.g., user not authenticated or other issues\n      console.error('Error:', error);\n    });\n    const now = new Date();\n    const currentHour = now.getHours(); // Set the greeting based on the time\n\n    if (currentHour >= 5 && currentHour < 12) {\n      this.greeting = 'Good Morning';\n    } else if (currentHour >= 12 && currentHour < 17) {\n      this.greeting = 'Good Afternoon';\n    } else {\n      this.greeting = 'Good Night';\n    }\n\n    this.claimservice.getTableData4().subscribe(data => {\n      this.tableData = data;\n    });\n    this.claimservice.getTableData5().subscribe(data => {\n      this.tableData1 = data;\n    });\n    this.claimservice.getTableData6().subscribe(data => {\n      this.tableData2 = data;\n    });\n    this.loadTradingViewScript();\n    this.loadTradingViewScript1();\n  }\n\n  ngAfterViewInit() {\n    // Load with default symbol\n    this.loadTradingViewWidget(this.defaultSymbol);\n  }\n\n  logout() {\n    this.userAuthService.clear();\n    this.router.navigate(['']);\n  }\n\n  loadTradingViewWidget(symbol) {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'https://s3.tradingview.com/tv.js';\n    script.async = true;\n\n    script.onload = () => this.createTradingViewWidget(symbol);\n\n    document.head.appendChild(script);\n  }\n\n  createTradingViewWidget(symbol) {\n    if (!this.tradingViewWidget) {\n      // If the widget doesn't exist, create it\n      this.tradingViewWidget = new window.TradingView.widget({\n        \"autosize\": true,\n        \"symbol\": symbol,\n        \"interval\": \"D\",\n        \"timezone\": \"Etc/UTC\",\n        \"theme\": \"dark\",\n        \"style\": \"1\",\n        \"locale\": \"fr\",\n        \"enable_publishing\": true,\n        \"allow_symbol_change\": true,\n        \"container_id\": \"tradingview_c976b\"\n      });\n    } else {\n      // If the widget exists, update the symbol\n      this.tradingViewWidget.chart().setSymbol(symbol);\n    }\n  }\n\n  onSymbolChange(event) {\n    const selectedSymbol = event.target.value; // Remove the existing TradingView widget\n\n    if (this.tradingViewWidget) {\n      this.tradingViewWidget.remove();\n      this.tradingViewWidget = null;\n    } // Load a new TradingView widget with the selected symbol\n\n\n    this.loadTradingViewWidget(selectedSymbol);\n  }\n\n  loadTradingViewScript() {\n    const script = this.renderer.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-stock-heatmap.js';\n    script.async = true; // Add your widget configuration here\n\n    script.text = `\n      {\n        \"exchanges\": [],\n        \"dataSource\": \"SPX500\",\n        \"grouping\": \"sector\",\n        \"blockSize\": \"market_cap_basic\",\n        \"blockColor\": \"change\",\n        \"locale\": \"fr\",\n        \"symbolUrl\": \"\",\n        \"colorTheme\": \"light\",\n        \"hasTopBar\": false,\n        \"isDataSetEnabled\": false,\n        \"isZoomEnabled\": true,\n        \"hasSymbolTooltip\": true,\n        \"width\": \"800\",\n        \"height\": \"500\"\n      }\n    `;\n    const container = document.querySelector('.tradingview-widget-container'); // Use the appropriate selector\n\n    this.renderer.appendChild(container, script);\n  }\n\n  loadTradingViewScript1() {\n    const script = this.renderer.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-crypto-coins-heatmap.js';\n    script.async = true; // Add your widget configuration here\n\n    script.text = `\n      {\n        \"dataSource\": \"Crypto\",\n        \"blockSize\": \"market_cap_calc\",\n        \"blockColor\": \"change\",\n        \"locale\": \"fr\",\n        \"symbolUrl\": \"\",\n        \"colorTheme\": \"light\",\n        \"hasTopBar\": false,\n        \"isDataSetEnabled\": false,\n        \"isZoomEnabled\": true,\n        \"hasSymbolTooltip\": true,\n        \"width\": \"800\",\n        \"height\": \"500\"\n      }\n    `;\n    const container = document.querySelector('.tradingview-widget-container1');\n    this.renderer.appendChild(container, script);\n  }\n\n};\nBodyUserComponent = __decorate([Component({\n  selector: 'app-body-user',\n  templateUrl: './body-user.component.html',\n  styleUrls: ['./body-user.component.css']\n})], BodyUserComponent);\nexport { BodyUserComponent };","map":{"version":3,"sources":["C:/Users/ASUS/OneDrive/Documents/GitHub/pi_frontend/src/app/FrontOffice/body-user/body-user.component.ts"],"names":["__decorate","Component","BodyUserComponent","constructor","userAuthService","router","userService","http","claimservice","renderer","greeting","defaultSymbol","ngOnInit","reloadOnce","getCurrentUser","subscribe","user","currentUser","error","console","now","Date","currentHour","getHours","getTableData4","data","tableData","getTableData5","tableData1","getTableData6","tableData2","loadTradingViewScript","loadTradingViewScript1","ngAfterViewInit","loadTradingViewWidget","logout","clear","navigate","symbol","script","document","createElement","type","src","async","onload","createTradingViewWidget","head","appendChild","tradingViewWidget","window","TradingView","widget","chart","setSymbol","onSymbolChange","event","selectedSymbol","target","value","remove","text","container","querySelector","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nlet BodyUserComponent = class BodyUserComponent {\r\n    constructor(userAuthService, router, userService, http, claimservice, renderer) {\r\n        this.userAuthService = userAuthService;\r\n        this.router = router;\r\n        this.userService = userService;\r\n        this.http = http;\r\n        this.claimservice = claimservice;\r\n        this.renderer = renderer;\r\n        this.greeting = '';\r\n        this.defaultSymbol = \"XAUUSD\";\r\n    }\r\n    ngOnInit() {\r\n        this.claimservice.reloadOnce();\r\n        this.userService.getCurrentUser().subscribe((user) => {\r\n            this.currentUser = user;\r\n        }, (error) => {\r\n            // Handle errors, e.g., user not authenticated or other issues\r\n            console.error('Error:', error);\r\n        });\r\n        const now = new Date();\r\n        const currentHour = now.getHours();\r\n        // Set the greeting based on the time\r\n        if (currentHour >= 5 && currentHour < 12) {\r\n            this.greeting = 'Good Morning';\r\n        }\r\n        else if (currentHour >= 12 && currentHour < 17) {\r\n            this.greeting = 'Good Afternoon';\r\n        }\r\n        else {\r\n            this.greeting = 'Good Night';\r\n        }\r\n        this.claimservice.getTableData4().subscribe(data => {\r\n            this.tableData = data;\r\n        });\r\n        this.claimservice.getTableData5().subscribe(data => {\r\n            this.tableData1 = data;\r\n        });\r\n        this.claimservice.getTableData6().subscribe(data => {\r\n            this.tableData2 = data;\r\n        });\r\n        this.loadTradingViewScript();\r\n        this.loadTradingViewScript1();\r\n    }\r\n    ngAfterViewInit() {\r\n        // Load with default symbol\r\n        this.loadTradingViewWidget(this.defaultSymbol);\r\n    }\r\n    logout() {\r\n        this.userAuthService.clear();\r\n        this.router.navigate(['']);\r\n    }\r\n    loadTradingViewWidget(symbol) {\r\n        const script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = 'https://s3.tradingview.com/tv.js';\r\n        script.async = true;\r\n        script.onload = () => this.createTradingViewWidget(symbol);\r\n        document.head.appendChild(script);\r\n    }\r\n    createTradingViewWidget(symbol) {\r\n        if (!this.tradingViewWidget) {\r\n            // If the widget doesn't exist, create it\r\n            this.tradingViewWidget = new window.TradingView.widget({\r\n                \"autosize\": true,\r\n                \"symbol\": symbol,\r\n                \"interval\": \"D\",\r\n                \"timezone\": \"Etc/UTC\",\r\n                \"theme\": \"dark\",\r\n                \"style\": \"1\",\r\n                \"locale\": \"fr\",\r\n                \"enable_publishing\": true,\r\n                \"allow_symbol_change\": true,\r\n                \"container_id\": \"tradingview_c976b\"\r\n            });\r\n        }\r\n        else {\r\n            // If the widget exists, update the symbol\r\n            this.tradingViewWidget.chart().setSymbol(symbol);\r\n        }\r\n    }\r\n    onSymbolChange(event) {\r\n        const selectedSymbol = event.target.value;\r\n        // Remove the existing TradingView widget\r\n        if (this.tradingViewWidget) {\r\n            this.tradingViewWidget.remove();\r\n            this.tradingViewWidget = null;\r\n        }\r\n        // Load a new TradingView widget with the selected symbol\r\n        this.loadTradingViewWidget(selectedSymbol);\r\n    }\r\n    loadTradingViewScript() {\r\n        const script = this.renderer.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-stock-heatmap.js';\r\n        script.async = true;\r\n        // Add your widget configuration here\r\n        script.text = `\r\n      {\r\n        \"exchanges\": [],\r\n        \"dataSource\": \"SPX500\",\r\n        \"grouping\": \"sector\",\r\n        \"blockSize\": \"market_cap_basic\",\r\n        \"blockColor\": \"change\",\r\n        \"locale\": \"fr\",\r\n        \"symbolUrl\": \"\",\r\n        \"colorTheme\": \"light\",\r\n        \"hasTopBar\": false,\r\n        \"isDataSetEnabled\": false,\r\n        \"isZoomEnabled\": true,\r\n        \"hasSymbolTooltip\": true,\r\n        \"width\": \"800\",\r\n        \"height\": \"500\"\r\n      }\r\n    `;\r\n        const container = document.querySelector('.tradingview-widget-container'); // Use the appropriate selector\r\n        this.renderer.appendChild(container, script);\r\n    }\r\n    loadTradingViewScript1() {\r\n        const script = this.renderer.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-crypto-coins-heatmap.js';\r\n        script.async = true;\r\n        // Add your widget configuration here\r\n        script.text = `\r\n      {\r\n        \"dataSource\": \"Crypto\",\r\n        \"blockSize\": \"market_cap_calc\",\r\n        \"blockColor\": \"change\",\r\n        \"locale\": \"fr\",\r\n        \"symbolUrl\": \"\",\r\n        \"colorTheme\": \"light\",\r\n        \"hasTopBar\": false,\r\n        \"isDataSetEnabled\": false,\r\n        \"isZoomEnabled\": true,\r\n        \"hasSymbolTooltip\": true,\r\n        \"width\": \"800\",\r\n        \"height\": \"500\"\r\n      }\r\n    `;\r\n        const container = document.querySelector('.tradingview-widget-container1');\r\n        this.renderer.appendChild(container, script);\r\n    }\r\n};\r\nBodyUserComponent = __decorate([\r\n    Component({\r\n        selector: 'app-body-user',\r\n        templateUrl: './body-user.component.html',\r\n        styleUrls: ['./body-user.component.css']\r\n    })\r\n], BodyUserComponent);\r\nexport { BodyUserComponent };\r\n"]},"metadata":{},"sourceType":"module"}