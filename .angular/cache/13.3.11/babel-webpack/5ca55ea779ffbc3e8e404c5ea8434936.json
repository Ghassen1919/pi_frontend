{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet PortfolioComponent = class PortfolioComponent {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.widgetsConfig = [{\n      symbol: \"OANDA:XAUUSD\",\n      title: \"Gold best order prediction\"\n    }, {\n      symbol: \"NASDAQ:AAPL\",\n      title: \"Apple equities best order prediction\"\n    }, {\n      symbol: \"BTCUSD\",\n      title: \"Bitcoin best order prediction\"\n    }, {\n      symbol: \"BINANCE:ETHUSDT\",\n      title: \"Ethereum best order prediction\"\n    }, {\n      symbol: \"NASDAQ:MSFT\",\n      title: \"Microsoft best order prediction\"\n    }, {\n      symbol: \"TVC:USOIL\",\n      title: \"OIL best order prediction\"\n    } // Add more widgets as needed\n    ];\n    this.widgetsPerPage = 3;\n    this.currentPage = 0;\n  }\n\n  ngOnInit() {\n    this.loadWidgets();\n  }\n\n  ngAfterViewInit() {\n    this.loadWidgets();\n  }\n\n  ngOnDestroy() {// Cleanup or handle anything necessary on component destruction\n  }\n\n  loadWidgets() {\n    const startIndex = this.currentPage * this.widgetsPerPage;\n    const endIndex = startIndex + this.widgetsPerPage;\n    const widgetsToLoad = this.widgetsConfig.slice(startIndex, endIndex);\n    widgetsToLoad.forEach((widget, index) => {\n      const script = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-technical-analysis.js';\n      script.async = true;\n      script.text = `\n        {\n          \"interval\": \"1m\",\n          \"width\": 300,\n          \"isTransparent\": false,\n          \"height\": 400,\n          \"symbol\": \"${widget.symbol}\",\n          \"showIntervalTabs\": true,\n          \"displayMode\": \"single\",\n          \"locale\": \"fr\",\n          \"colorTheme\": \"dark\"\n        }\n      `;\n      const container = this.renderer.createElement('div');\n      container.classList.add('tradingview-widget-container');\n      this.renderer.appendChild(container, script);\n      this.renderer.appendChild(container, this.renderer.createText(widget.title));\n      const targetContainer = this.tradingviewContainer.nativeElement;\n      this.renderer.appendChild(targetContainer, container);\n    });\n  }\n\n  changePage(newPage) {\n    if (newPage >= 0 && newPage * this.widgetsPerPage < this.widgetsConfig.length) {\n      this.currentPage = newPage;\n      this.clearWidgets();\n      this.loadWidgets();\n    }\n  }\n\n  clearWidgets() {\n    const targetContainer = this.tradingviewContainer.nativeElement;\n    this.renderer.setProperty(targetContainer, 'innerHTML', '');\n  }\n\n};\n\n__decorate([ViewChild('tradingviewContainer')], PortfolioComponent.prototype, \"tradingviewContainer\", void 0);\n\nPortfolioComponent = __decorate([Component({\n  selector: 'app-portfolio',\n  templateUrl: './portfolio.component.html',\n  styleUrls: ['./portfolio.component.css']\n})], PortfolioComponent);\nexport { PortfolioComponent };","map":{"version":3,"sources":["C:/Users/ASUS/OneDrive/Documents/GitHub/pi_frontend/src/app/FrontOffice/portfolio/portfolio.component.ts"],"names":["__decorate","Component","ViewChild","PortfolioComponent","constructor","renderer","widgetsConfig","symbol","title","widgetsPerPage","currentPage","ngOnInit","loadWidgets","ngAfterViewInit","ngOnDestroy","startIndex","endIndex","widgetsToLoad","slice","forEach","widget","index","script","createElement","type","src","async","text","container","classList","add","appendChild","createText","targetContainer","tradingviewContainer","nativeElement","changePage","newPage","length","clearWidgets","setProperty","prototype","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, ViewChild } from '@angular/core';\r\nlet PortfolioComponent = class PortfolioComponent {\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n        this.widgetsConfig = [\r\n            { symbol: \"OANDA:XAUUSD\", title: \"Gold best order prediction\" },\r\n            { symbol: \"NASDAQ:AAPL\", title: \"Apple equities best order prediction\" },\r\n            { symbol: \"BTCUSD\", title: \"Bitcoin best order prediction\" },\r\n            { symbol: \"BINANCE:ETHUSDT\", title: \"Ethereum best order prediction\" },\r\n            { symbol: \"NASDAQ:MSFT\", title: \"Microsoft best order prediction\" },\r\n            { symbol: \"TVC:USOIL\", title: \"OIL best order prediction\" }\r\n            // Add more widgets as needed\r\n        ];\r\n        this.widgetsPerPage = 3;\r\n        this.currentPage = 0;\r\n    }\r\n    ngOnInit() {\r\n        this.loadWidgets();\r\n    }\r\n    ngAfterViewInit() {\r\n        this.loadWidgets();\r\n    }\r\n    ngOnDestroy() {\r\n        // Cleanup or handle anything necessary on component destruction\r\n    }\r\n    loadWidgets() {\r\n        const startIndex = this.currentPage * this.widgetsPerPage;\r\n        const endIndex = startIndex + this.widgetsPerPage;\r\n        const widgetsToLoad = this.widgetsConfig.slice(startIndex, endIndex);\r\n        widgetsToLoad.forEach((widget, index) => {\r\n            const script = this.renderer.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-technical-analysis.js';\r\n            script.async = true;\r\n            script.text = `\n        {\n          \"interval\": \"1m\",\n          \"width\": 300,\n          \"isTransparent\": false,\n          \"height\": 400,\n          \"symbol\": \"${widget.symbol}\",\n          \"showIntervalTabs\": true,\n          \"displayMode\": \"single\",\n          \"locale\": \"fr\",\n          \"colorTheme\": \"dark\"\n        }\n      `;\r\n            const container = this.renderer.createElement('div');\r\n            container.classList.add('tradingview-widget-container');\r\n            this.renderer.appendChild(container, script);\r\n            this.renderer.appendChild(container, this.renderer.createText(widget.title));\r\n            const targetContainer = this.tradingviewContainer.nativeElement;\r\n            this.renderer.appendChild(targetContainer, container);\r\n        });\r\n    }\r\n    changePage(newPage) {\r\n        if (newPage >= 0 && newPage * this.widgetsPerPage < this.widgetsConfig.length) {\r\n            this.currentPage = newPage;\r\n            this.clearWidgets();\r\n            this.loadWidgets();\r\n        }\r\n    }\r\n    clearWidgets() {\r\n        const targetContainer = this.tradingviewContainer.nativeElement;\r\n        this.renderer.setProperty(targetContainer, 'innerHTML', '');\r\n    }\r\n};\r\n__decorate([\r\n    ViewChild('tradingviewContainer')\r\n], PortfolioComponent.prototype, \"tradingviewContainer\", void 0);\r\nPortfolioComponent = __decorate([\r\n    Component({\r\n        selector: 'app-portfolio',\r\n        templateUrl: './portfolio.component.html',\r\n        styleUrls: ['./portfolio.component.css']\r\n    })\r\n], PortfolioComponent);\r\nexport { PortfolioComponent };\r\n"]},"metadata":{},"sourceType":"module"}